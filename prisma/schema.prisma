// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  progress      Progress[]
  achievements  Achievement[]
  quizResults   QuizResult[]
  challenges    ChallengeResult[]
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  bio          String?   @db.Text
  title        String?
  githubUrl    String?
  linkedinUrl  String?
  websiteUrl   String?
  skills       String[]
  preferences  Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  roadmapId    String
  topicId      String
  status       String    // 'not-started', 'in-progress', 'completed'
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap      Roadmap   @relation(fields: [roadmapId], references: [id])
  topic        Topic     @relation(fields: [topicId], references: [id])

  @@unique([userId, roadmapId, topicId])
}

model Achievement {
  id           String    @id @default(cuid())
  userId       String
  type         String    // 'streak', 'completion', 'challenge', etc.
  name         String
  description  String
  earnedAt     DateTime  @default(now())
  metadata     Json?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id           String    @id @default(cuid())
  userId       String
  quizId       String
  score        Int
  totalQuestions Int
  answers      Json      // Store user's answers
  completedAt  DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChallengeResult {
  id           String    @id @default(cuid())
  userId       String
  challengeId  String
  status       String    // 'completed', 'failed', 'in-progress'
  solution     String    @db.Text
  executionTime Int?     // in milliseconds
  memory       Int?      // in bytes
  completedAt  DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Roadmap {
  id              String    @id @default(cuid())
  title           String
  description     String
  difficulty      String    // Beginner, Intermediate, Advanced
  timeCommitment  String    // Light, Moderate, Intensive
  estimatedHours  Int
  tags            String[]
  topics          Topic[]
  progress        Progress[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Topic {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String    @db.Text
  order       Int
  roadmapId   String
  roadmap     Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([roadmapId])
}

model Settings {
  id                String   @id @default("1")
  siteName          String   @default("PathForge")
  siteDescription   String   @default("Interactive learning platform for developers")
  maintenanceMode   Boolean  @default(false)
  allowRegistration Boolean  @default(true)
  emailNotifications Boolean @default(true)
  analyticsEnabled  Boolean  @default(true)
  updatedAt         DateTime @updatedAt
}
